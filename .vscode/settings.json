{
  "npm.packageManager": "yarn",
  "cSpell.words": [
    "alasql",
    "backlink",
    "backlinks",
    "taskssql"
  ],
  "terminal.integrated.defaultProfile.linux": "pwsh",
  "terminal.integrated.profiles.linux": {
    "bash": {
      "path": "bash",
      "icon": "terminal-bash"
    },
    "zsh": null,
    "fish": null,
    "tmux": null,
    "pwsh": {
      "path": "pwsh",
      "icon": "terminal-powershell"
    }
  },
  "commit-message-editor.tokens": [
    {
      "label": "Type",
      "name": "type",
      "type": "enum",
      "description": "Type of changes",
      "options": [
        {
          "label": "---",
          "value": ""
        },
        {
          "label": "build - hidden",
          "value": "build",
          "description": "The commit alters the build system or external dependencies of the product (adding, removing, or upgrading dependencies)."
        },
        {
          "label": "change existing - Bug Fixes and Changes",
          "value": "change",
          "description": "The commit changes the implementation of an existing feature."
        },
        {
          "label": "chore - hidden",
          "value": "chore",
          "description": "Updating grunt tasks etc; no production code change"
        },
        {
          "label": "ci - hidden",
          "value": "ci",
          "description": "Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)"
        },
        {
          "label": "deprecate - Bug Fixes and Changes",
          "value": "deprecate",
          "description": "The commit deprecates existing functionality, but does not remove it from the product. For example, sometimes older public APIs may get deprecated because newer, more efficient APIs are available. Removing the APIs could break existing integrations so the APIs may be marked as deprecated in order to encourage the integration developers to migrate to the newer APIs while also giving them time before removing older functionality."
        },
        {
          "label": "docs - Documentation",
          "value": "docs",
          "description": "Documentation only changes"
        },
        {
          "label": "feat - Features",
          "value": "feat",
          "description": "A new feature"
        },
        {
          "label": "fix - Bug Fixes and Changes",
          "value": "fix",
          "description": "A bug fix"
        },
        {
          "label": "perf - Internal",
          "value": "perf",
          "description": "A code change that improves performance"
        },
        {
          "label": "refactor - Internal",
          "value": "refactor",
          "description": "A code change that neither fixes a bug nor adds a feature"
        },
        {
          "label": "revert - hidden",
          "value": "revert",
          "description": "The commit reverts one or more commits that were previously included in the product, but were accidentally merged or serious issues were discovered that required their removal from the main branch."
        },
        {
          "label": "security - Internal",
          "value": "security",
          "description": "The commit improves the security of the product or resolves a security issue that has been reported."
        },
        {
          "label": "style - hidden",
          "value": "style",
          "description": "Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)"
        },
        {
          "label": "test - Internal",
          "value": "test",
          "description": "Adding missing tests or correcting existing tests"
        }
      ]
    },
    {
      "label": "Scope",
      "name": "scope",
      "description": "A scope may be provided to a commitâ€™s type, to provide additional contextual information and is contained within parenthesis, e.g., \"feat(parser): add ability to parse arrays\".",
      "type": "text",
      "multiline": false,
      "prefix": "(",
      "suffix": ")"
    },
    {
      "label": "Short description",
      "name": "description",
      "description": "Short description in the subject line.",
      "type": "text",
      "multiline": false
    },
    {
      "label": "Body",
      "name": "body",
      "description": "Optional body",
      "type": "text",
      "multiline": true,
      "lines": 5,
      "maxLines": 10
    },
    {
      "label": "Breaking change",
      "name": "breaking_change",
      "type": "boolean",
      "value": "BREAKING CHANGE: ",
      "default": false
    },
    {
      "label": "Footer",
      "name": "footer",
      "description": "Optional footer",
      "type": "text",
      "multiline": true
    }
  ],
  "commit-message-editor.view.defaultView": "form",
  "commit-message-editor.view.rulers": [
    50,
    72
  ],
  "eslint.format.enable": true,
  "eslint.lintTask.enable": true,
  "eslint.lintTask.options": ". --cache",
  "eslint.packageManager": "yarn",
  "commit-message-editor.staticTemplate": [
    "{type}{scope}: {description}",
    "",
    "This is a description of the change you are making to the platform or component. It should explain ",
    "why the change is being made. Link to any documents as required. This should indicate any addtional",
    "testing done outside of the existing build pipelines.",
    "",
    "## Checklist",
    "",
    "- [ ] My code follows the style guidelines of this project",
    "- [ ] I have performed a self-review of my own code and corrected any misspellings",
    "- [ ] I have commented my code, particularly in hard-to-understand areas so future engineers have context",
    "- [ ] I have made corresponding changes to the documentation and created TSGs where needed",
    "- [ ] My changes generate no new warnings in the build",
    "- [ ] I have added tests that prove my fix is effective or that my feature works",
    "- [ ] New and existing unit tests pass locally with my changes",
    "- [ ] Any dependent changes have been merged and published in downstream modules",
    "",
    "",
    "Related work items: #"
  ],
  "commit-message-editor.dynamicTemplate": [
    "{type}{scope}: {description}",
    "",
    "{body}",
    "",
    "{footer}"
  ],
}